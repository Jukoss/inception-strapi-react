import { from } from 'rxjs/observable/from';
import { of } from 'rxjs/observable/of';
import { combineEpics, ofType } from 'redux-observable';
import { push } from 'react-router-redux';
import axios from 'axios';

import { mergeMap, map, catchError, switchMap } from 'rxjs/operators';

import { serialize, handleError } from './../../api_helper';

import * as actionsTypes from './constants';

import { receiveLogIn, receiveUserMe, cancelLogIn } from './actions';

const logInEpic = (action$) => action$.pipe(
  ofType(actionsTypes.LOG_IN),
  mergeMap(action => {
    const { url, data } = action.payload;
    return from(axios.post(url, serialize(data))).pipe(
      map((result) => (
        result && result.data ? receiveLogIn(result.data) : cancelLogIn()
      )),
      catchError(error => of({
        type: actionsTypes.LOG_IN_ERROR,
        payload: error.response,
        error: true
      }))
    )
  })
);

const receiveLogInEpic = (action$) => action$.pipe(
  ofType(actionsTypes.LOG_IN_RECIEVED),
  switchMap(action => {
    const { user } = action.payload.data;
    return of(push(user ? '/' : '/login'));
  })
);

const userMeEpic = (action$) => action$.pipe(
  ofType(actionsTypes.USER_ME),
  switchMap(action => (
    from(axios.get('http://18.219.0.22:1337/user/me')).pipe(
      map((result) => (
        result && result.data ? receiveUserMe(result.data) : cancelLogIn()
      )),
      catchError(error => of({
        type: actionsTypes.LOG_IN_ERROR,
        payload: error.response,
        error: true
      }))
  )))
);

export default combineEpics(
  logInEpic,
  receiveLogInEpic,
  userMeEpic
);