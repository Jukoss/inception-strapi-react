import { from } from 'rxjs/observable/from';
import { of } from 'rxjs/observable/of';
import { combineEpics, ofType } from 'redux-observable';
import axios from 'axios';

import { mergeMap, map, catchError } from 'rxjs/operators';

import { serialize, handleError } from './../../api_helper';

import * as actionsTypes from './constants';

import { receiveLogIn, cancelLogIn } from './actions';

const logInEpic = (action$) => action$.pipe(
  ofType(actionsTypes.LOG_IN),
  mergeMap(action => {
    const { url, data } = action.payload;
    return from(axios.post(url, serialize(data))).pipe(
      map((result) => (
        result && result.data ? receiveLogIn(result.data) : cancelLogIn()
      )),
      catchError(error => of({
        type: actionsTypes.LOG_IN_ERROR,
        payload: error.response,
        error: true
      }))
    )
  })
);

export default combineEpics(
  logInEpic
);