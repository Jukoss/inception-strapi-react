import axios from 'axios';
import Cookies from 'js-cookie';

import * as actionsTypes from './constants';

const TOKEN_TIME = 2592000;

const initialState = {
  token: Cookies.get('BRJWT') || false,
  user: {},
  preloader: false
};

if (initialState && initialState.token) {
  axios.defaults.headers.common.Authorization = `${initialState.token}`;
}

export default (state = initialState, action = {}) => {
  switch (action.type) {
    case actionsTypes.USER_ME:
    case actionsTypes.LOG_IN: {
      return {
        ...state,
        preloader: true
      }
    }
    case actionsTypes.LOG_OUT: {
      Cookies.remove('BRJWT');
      delete axios.defaults.headers.common.Authorization;
      return {};
    }
    case actionsTypes.LOG_IN_RECIEVED: {
      const token = `Bearer ${action.payload.data.jwt}`;

      Cookies.remove('BRJWT');

      if (action.payload.remember) {
        const d = new Date();
        d.setTime(d.getTime() + (TOKEN_TIME * 1000));
        Cookies.set('BRJWT', token, {
          expires: d
        });
      } else {
        Cookies.set('BRJWT', token);
      }


      axios.defaults.headers.common.Authorization = token;
      return {
        user: action.payload.data && action.payload.data.user,
        token,
        preloader: false
      };
    }
    case actionsTypes.USER_ME_RECIEVED: {
      return {
        ...state,
        user: action.payload.data,
        preloader: false
      }
    }
    default:
      return state;
  }
};
